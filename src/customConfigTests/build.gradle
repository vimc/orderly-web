dependencies {
    testImplementation "org.slf4j:slf4j-simple:1.7.25"
    testImplementation "com.beust:klaxon:5.5"
    testImplementation "org.mockito:mockito-core:2.+"
    testImplementation "com.nhaarman:mockito-kotlin:1.3.0"
    testImplementation "org.assertj:assertj-core:3.6.2"
    testImplementation "com.beust:klaxon:5.5"
    testImplementation "com.github.fge:json-schema-validator:2.2.6"
    testImplementation "org.seleniumhq.selenium:selenium-java:3.11.0"
    testImplementation "io.specto:hoverfly-java-junit5:0.14.0"
    testImplementation "com.sparkjava:spark-core:2.9.3"
    testImplementation "org.jooq:jooq:3.13.5"
    testImplementation "org.jooq:jooq-meta:3.13.5"
    testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.1"

    testImplementation project(":databaseInterface")
    testImplementation project(":app")
    testImplementation project(":testHelpers")
}

task copyStatic(type: Copy) {
    from '../app/static/public'
    include '*/**'
    into 'static/public'
    outputs.upToDateWhen { false }
}

task copyTemplates(type: Copy) {
    from '../app/templates'
    include '*/**'
    into 'templates'
    outputs.upToDateWhen { false }
}

test.dependsOn 'copyStatic'
test.dependsOn 'copyTemplates'
test.dependsOn ':app:archiveOrderlyDemo'

test {
    testLogging {
        // remove standard output logging
        // by assigning only 'failed' and 'standard_error' events
        events "failed", "standard_error"
    }
    afterTest {  desc ,  result  ->
        project(':app').resetOrderlyDemo()
    }
}
