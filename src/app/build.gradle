buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'com.palantir.docker' version '0.33.0'
}

def app_docker_version = 'UNKNOWN'
if (hasProperty('docker_version')) {
    app_docker_version = docker_version
}
def app_docker_name = 'orderly-web'
if (hasProperty('docker_name')) {
    app_docker_name = docker_name
}

apply plugin: 'application'

mainClassName = "org.vaccineimpact.orderlyweb.app_start.SparkAppKt"

dependencies {
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "com.sparkjava:spark-core:2.7.1"
    implementation "com.sparkjava:spark-template-freemarker:2.7.1"
    implementation "org.slf4j:slf4j-simple:1.7.25"
    implementation "com.google.code.gson:gson:2.2.4"
    implementation "com.github.salomonbrys.kotson:kotson:2.5.0"
    implementation "com.opencsv:opencsv:3.9"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "org.apache.commons:commons-text:1.9"
    implementation "org.postgresql:postgresql:9.4.1212.jre7"
    implementation "org.jooq:jooq:3.13.5"
    implementation "org.jooq:jooq-meta:3.13.5"
    implementation "org.pac4j:spark-pac4j:3.0.0"
    implementation "org.pac4j:pac4j-http:3.2.0"
    implementation 'org.pac4j:pac4j-jwt:3.2.0'
    implementation 'org.pac4j:pac4j-oauth:3.6.1'
    implementation 'commons-codec:commons-codec:1.10'
    implementation "org.json:json:20201115"
    implementation "com.squareup.okhttp3:okhttp:4.8.1"
    implementation "org.ocpsoft.prettytime:prettytime:4.0.5.Final"
    implementation "org.kohsuke:github-api:1.303"

    implementation project(":databaseInterface")

    testImplementation "org.slf4j:slf4j-simple:1.7.21"
    testImplementation "com.beust:klaxon:5.5"
    testImplementation "com.opencsv:opencsv:3.9"
    testImplementation "com.github.fge:json-schema-validator:2.2.6"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.+"
    testImplementation "com.nhaarman:mockito-kotlin:1.3.0"
    testImplementation "org.assertj:assertj-core:3.6.2"
    testImplementation "com.beust:klaxon:5.5"
    testImplementation "net.sourceforge.htmlunit:htmlunit:2.4"
    testImplementation "org.xmlmatchers:xml-matchers:0.10"
    testImplementation "org.jsoup:jsoup:1.11.3"
    testImplementation "org.hamcrest:hamcrest:2.1"

    testImplementation project(":testHelpers")
}

docker {
    name "${app_docker_name}:${app_docker_version}"
    file('Dockerfile')
    files tasks.distTar.outputs, "app.jar"
}

// creates folder at app/demo with up to date orderly test data
task generateTestData() {
    doLast {
        String image = "vimc/orderly:master"
        def username = System.properties['user.name']
        def uid = ["id", "-u", username].execute().text.trim()

        println("Pulling " + image)

        exec {
            commandLine 'docker', 'pull', image
        }
        exec {
            commandLine 'docker', 'run', '--rm', '--entrypoint', 'create_orderly_demo.sh', '--user', uid, '--env', 'HOME=/tmp', '-v', "$projectDir:/orderly", '-w', "/orderly", image, "."
        }
        
        String owMigrateImage = "vimc/orderlyweb-migrate:master"
        println("Pulling " + owMigrateImage)
        exec {
            commandLine 'docker', 'pull', owMigrateImage
        }
        exec {
            commandLine 'docker', 'run', '--rm', '-v', "$projectDir/demo:/orderly", owMigrateImage
        }
        exec {
            commandLine 'docker', 'run', '--rm', '-v', "$projectDir/git:/orderly", owMigrateImage
        }
    }
}

// removes the app/demo folder
task cleanUpTestData() {
    doLast {
        exec {
            commandLine "rm", "$projectDir/demo", "--recursive"
        }
        exec {
            commandLine "rm", "$projectDir/git", "--recursive"
        }
    }
}

task copySpec(type: Copy) {
    from 'src/test/resources/spec'
    include '*.schema.json'
    into 'build/classes/test/spec'
    outputs.upToDateWhen { false }
}

task archiveGitDemo() {
    doLast {
        exec {
            commandLine "tar", "czf", "$projectDir/git.tar.gz", "-C", "$projectDir", "git"
        }
    }

}

compileTestKotlin.dependsOn 'copyConfigToResources'

test.dependsOn 'copySpec'
test.dependsOn 'copyConfigToResources'
test.dependsOn 'copyTestConfigToResources'
test.dependsOn 'copyTestDataToResources'

jar.dependsOn 'copyConfigToResources'

task compileFrontEnd() {
    doLast {
        exec {
            commandLine "npm", "run", "build", "--prefix=$projectDir/static/"
        }
    }
}

ext.resetGitDemo = {
    exec {
        commandLine "rm", "$projectDir/git/*", "-rf"
        commandLine "rm", "$projectDir/git/.git", "-rf"
        commandLine "tar", "xf", "$projectDir/git.tar.gz"
    }
}

processResources.dependsOn 'compileFrontEnd'

copyConfig.finalizedBy 'showConfig'
copyTestConfig.finalizedBy 'showTestConfig'
