buildscript {
    repositories {
        mavenCentral()
        // This is needed for gradle-docker
        jcenter()
    }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

def api_docker_version = 'UNKNOWN'
if (hasProperty('docker_version')) {
    api_docker_version = docker_version
}
def api_docker_name = 'orderly-web'
if (hasProperty('docker_name')) {
    api_docker_name = docker_name
}

apply plugin: 'application'
apply plugin: 'docker'

mainClassName = "org.vaccineimpact.orderlyweb.app_start.SparkAppKt"

dependencies {
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile "com.sparkjava:spark-core:2.7.1"
    compile "com.sparkjava:spark-template-freemarker:2.7.1"
    compile "org.slf4j:slf4j-simple:1.7.21"

    compile "com.google.code.gson:gson:2.2.4"
    compile "com.github.salomonbrys.kotson:kotson:2.5.0"
    compile "com.opencsv:opencsv:3.9"

    compile "org.postgresql:postgresql:9.4.1212.jre7"
    compile "org.jooq:jooq:3.9.1"
    compile "org.jooq:jooq-meta:3.9.1"

    compile "org.pac4j:spark-pac4j:2.2.0"
    compile "org.pac4j:pac4j-http:2.2.1"
    compile 'org.pac4j:pac4j-jwt:2.0.0'
    compile 'commons-codec:commons-codec:1.10'

    compile "org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5"

    compile "khttp:khttp:0.1.0"

    testCompile "org.slf4j:slf4j-simple:1.7.21"
    testCompile "khttp:khttp:0.1.0"
    testCompile "com.beust:klaxon:0.31"
    testCompile "com.opencsv:opencsv:3.9"

    testCompile "com.github.fge:json-schema-validator:2.2.6"

    compile project(":databaseInterface")
    compile project(":models")
    compile project(":security")

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.+"
    testCompile "com.nhaarman:mockito-kotlin:1.3.0"
    testCompile "org.assertj:assertj-core:3.6.2"
    testCompile "com.beust:klaxon:0.31"
    testCompile project(":testHelpers")
}

docker {
    baseImage = "openjdk:8u121-jre"
}

distDocker {
    dependsOn = [build]
    push = true
    tag = api_docker_name
    tagVersion = api_docker_version
}

// creates folder at app/demo with up to date orderly test data
task generateTestData() {
    doLast {
        String image = "docker.montagu.dide.ic.ac.uk:5000/orderly:master"
        def username = System.properties['user.name']
        def uid = ["id", "-u", username].execute().text.trim()

        println("Pulling " + image)

        exec {
            commandLine 'docker', 'pull', image
        }
        exec {
            commandLine 'docker', 'run', '--rm', '--entrypoint', 'create_orderly_demo.sh', '-u', uid, '-v', "$projectDir:/orderly", '-w', "/orderly", image, "."
        }

        String owMigrateImage = "docker.montagu.dide.ic.ac.uk:5000/orderlyweb-migrate:master"
        println("Pulling " + owMigrateImage)
        exec {
            commandLine 'docker', 'pull', owMigrateImage
        }
        exec {
            commandLine 'docker', 'run', '--rm', '-v', "$projectDir/demo:/orderly", owMigrateImage
        }
        exec {
            commandLine 'docker', 'run', '--rm', '-v', "$projectDir/git:/orderly", owMigrateImage
        }
    }
}

// removes the app/demo folder
task cleanUpTestData() {
    doLast {
        exec {
            commandLine "rm", "$projectDir/demo", "--recursive"
        }
        exec {
            commandLine "rm", "$projectDir/git", "--recursive"
        }
    }
}

task copySpec(type: Copy) {
    from 'src/test/resources/spec'
    include '*.schema.json'
    into 'build/classes/test/spec'
    outputs.upToDateWhen { false }
}
test.dependsOn 'copySpec'

task compileFrontEnd() {
    doLast {
        exec {
            commandLine "npm", "run", "build", "--prefix=$projectDir/static/"
        }
    }
}

processResources.dependsOn 'compileFrontEnd'

copyConfig.finalizedBy 'showConfig'
copyTestConfig.finalizedBy 'showTestConfig'