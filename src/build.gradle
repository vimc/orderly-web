buildscript {
    ext.kotlin_version = '1.6.0'
    ext.detekt_version = '1.21.0-RC1'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
}

group 'org.vaccineimpact'
version '1.0-SNAPSHOT'

task run(dependsOn: ':app:run')
task generateDatabaseInterface(dependsOn: ':generateDatabaseInterface:run')
task generateTestData(dependsOn: ':app:generateTestData')

def loadPropertiesFile(path) {
    def props = new Properties()
    def f = file(path)
    if (f.exists()) {
        f.withReader {
            props.load(it)
        }
    }
    return props
}

def loadProperties() {
    println("Loading base configuration from config/default.properties.")
    def properties = loadPropertiesFile("config/default.properties")
    def userFile = file("config/current_user")
    if (userFile.exists()) {
        def user = userFile.text.trim()
        println("Using configuration for user $user")
        def userPropertiesFile = file("config/users/${user}.properties")
        if (userPropertiesFile.exists()) {
            println("Found extra configuration in config/users/${user}.properties")
            def userProperties = loadPropertiesFile(userPropertiesFile.path)
            properties.putAll(userProperties)
        } else {
            throw new Exception("You defined a user file, with user '$user', " +
                    "but no corresponding properties file exists at $userPropertiesFile.absolutePath")
        }
    }
    properties["project_dir"] = new File(properties["project_dir"]).getAbsolutePath()
    return properties
}

task loadPropertiesTask() {
    rootProject.ext.props = loadProperties()
    doLast {
        println("(Properties were loaded during configuration)")
    }
}

// local task to run all tests with up to date generated demo data from orderly
task runLocalTests(dependsOn: [":app:generateTestData", ":app:test"]) {
    finalizedBy ":app:cleanUpTestData"
}

subprojects {

    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: 'jacoco'
    apply plugin: 'io.gitlab.arturbosch.detekt'

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    detekt {
        config = files("$rootDir/config/detekt/detekt.yml")
        buildUponDefaultConfig = true
        baseline = file("$rootDir/config/detekt/baseline.yml")
    }

    tasks.detekt.jvmTarget = "1.8"

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
    }

    jacoco {
        toolVersion = "0.8.7"
        reportsDir = file("$projectDir/coverage")
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            csv.enabled = false
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: '**/SparkWrapper.kt')
            }))
        }
    }

    task copyConfig(type: Copy, dependsOn: ':loadPropertiesTask') {
        from 'src/main/resources'
        include '*'
        into 'build/classes/main/'
        expand(rootProject.ext.props)
        outputs.upToDateWhen { false }
    }
    //There are two different places the JVM might look for these, and it depends
    //on whether we're running in development, or from a proper JAR distribution
    //which one we need. So let's just do both
    task copyConfigToResources(type: Copy, dependsOn: ':loadPropertiesTask') {
        from 'src/main/resources'
        include '*'
        into 'build/resources/main/'
        expand(rootProject.ext.props)
        outputs.upToDateWhen { false }
    }
    task copyTestConfig(type: Copy, dependsOn: ':loadPropertiesTask') {
        from 'src/test/resources'
        include '*.properties'
        into 'build/classes/test/'
        expand(rootProject.ext.props)
    }
    task copyTestConfigToResources(type: Copy, dependsOn: ':loadPropertiesTask') {
        from 'src/test/resources'
        include '*.properties'
        into 'build/resources/test/'
        expand(rootProject.ext.props)
    }
    task copyTestDataToResources(type: Copy, dependsOn: ':loadPropertiesTask') {
        from 'src/test/resources'
        exclude '*.properties'
        into 'build/resources/test/'
    }

    processResources.finalizedBy 'copyConfig', 'copyConfigToResources'
    processTestResources.finalizedBy 'copyTestConfigToResources', 'copyTestConfig', 'copyTestDataToResources'

    task showConfig(dependsOn: 'copyConfig') {
        doLast {
            println("This is the config being used:")
            println(file("build/classes/main/config.properties").text)
        }
    }
    task showTestConfig(dependsOn: 'copyTestConfig') {
        doLast {
            println("This is the config being used:")
            println(file("build/classes/test/config.properties").text)
        }
    }

    jar.dependsOn 'copyConfigToResources'
}
