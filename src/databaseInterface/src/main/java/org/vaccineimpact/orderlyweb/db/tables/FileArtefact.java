/*
 * This file is generated by jOOQ.
*/
package org.vaccineimpact.orderlyweb.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.orderlyweb.db.DefaultSchema;
import org.vaccineimpact.orderlyweb.db.Keys;
import org.vaccineimpact.orderlyweb.db.tables.records.FileArtefactRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileArtefact extends TableImpl<FileArtefactRecord> {

    private static final long serialVersionUID = 597183370;

    /**
     * The reference instance of <code>file_artefact</code>
     */
    public static final FileArtefact FILE_ARTEFACT = new FileArtefact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileArtefactRecord> getRecordType() {
        return FileArtefactRecord.class;
    }

    /**
     * The column <code>file_artefact.id</code>.
     */
    public final TableField<FileArtefactRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>file_artefact.artefact</code>.
     */
    public final TableField<FileArtefactRecord, Integer> ARTEFACT = createField("artefact", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>file_artefact.file_hash</code>.
     */
    public final TableField<FileArtefactRecord, String> FILE_HASH = createField("file_hash", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>file_artefact.filename</code>.
     */
    public final TableField<FileArtefactRecord, String> FILENAME = createField("filename", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>file_artefact</code> table reference
     */
    public FileArtefact() {
        this("file_artefact", null);
    }

    /**
     * Create an aliased <code>file_artefact</code> table reference
     */
    public FileArtefact(String alias) {
        this(alias, FILE_ARTEFACT);
    }

    private FileArtefact(String alias, Table<FileArtefactRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileArtefact(String alias, Table<FileArtefactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FileArtefactRecord> getPrimaryKey() {
        return Keys.PK_FILE_ARTEFACT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FileArtefactRecord>> getKeys() {
        return Arrays.<UniqueKey<FileArtefactRecord>>asList(Keys.PK_FILE_ARTEFACT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FileArtefactRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FileArtefactRecord, ?>>asList(Keys.FK_FILE_ARTEFACT_REPORT_VERSION_ARTEFACT_1, Keys.FK_FILE_ARTEFACT_FILE_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileArtefact as(String alias) {
        return new FileArtefact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileArtefact rename(String name) {
        return new FileArtefact(name, null);
    }
}
